{"ast":null,"code":"const clientId = 'b40e94b31366469a8b562491410d4a68'; // Insert client ID here.\nconst redirectUri = 'http://localhost:3000'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken = \"\";\nconst Spotify = {\n  // first chk if the user of my application has an access token.\n  // if an access token exist, jus return it.\n  getAccessToken() {\n    if (accessToken) {\n      return accessToken;\n    }\n    const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    // 2nd, chk the access token and its entry are valid\n    // and return the access \n    // otherwise, we need to send author request to access the token\n    if (accessTokenMatch && expiresInMatch) {\n      accessToken = accessTokenMatch[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => accessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n      return accessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n      window.location = accessUrl;\n    }\n  },\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      }\n      return jsonResponse.tracks.items.map(track => ({\n        id: track.id,\n        name: track.name,\n        artist: track.artists[0].name,\n        album: track.album.name,\n        uri: track.uri\n      }));\n    });\n  },\n  savePlaylist(name, trackUris) {\n    if (!name || !trackUris.length) {\n      return;\n    }\n    // 1st obtain the spotify access token\n    const accessToken = Spotify.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessToken}`\n    };\n    let userId;\n    // make a fetch request to spotify\n    // pass in the access token of the user for this application\n    // 1st then statement is a promise reutrn after the api request return the data\n    // 2nd then statement is aalso promise that return the tracks from the previous promise.\n    return fetch('https://api.spotify.com/v1/me', {\n      headers: headers\n    }).then(response => response.json()).then(jsonResponse => {\n      userId = jsonResponse.id;\n      return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n        headers: headers,\n        method: 'POST',\n        body: JSON.stringify({\n          name: name\n        })\n      }).then(response => response.json()).then(jsonResponse => {\n        const playlistId = jsonResponse.id;\n        return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n          headers: headers,\n          method: 'POST',\n          body: JSON.stringify({\n            uris: trackUris\n          })\n        });\n      });\n    });\n  }\n};\nexport default Spotify;","map":{"version":3,"names":["clientId","redirectUri","accessToken","Spotify","getAccessToken","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"sources":["/Users/francisseotho/Library/Mobile Documents/com~apple~CloudDocs/Desktop/generation /spotify assessment/reactexamples/spotify-assmt-skeleton/src/utils/Spotify.js"],"sourcesContent":["const clientId = 'b40e94b31366469a8b562491410d4a68'; // Insert client ID here.\nconst redirectUri = 'http://localhost:3000'; // Have to add this to your accepted Spotify redirect URIs on the Spotify API.\nlet accessToken = \"\";\n\nconst Spotify = {\n    // first chk if the user of my application has an access token.\n    // if an access token exist, jus return it.\n    getAccessToken() {\n        if (accessToken) {\n            return accessToken;\n        }\n\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n        // 2nd, chk the access token and its entry are valid\n        // and return the access \n        // otherwise, we need to send author request to access the token\n        if (accessTokenMatch && expiresInMatch) {\n            accessToken = accessTokenMatch[1];\n            const expiresIn = Number(expiresInMatch[1]);\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/'); // This clears the parameters, allowing us to grab a new access token when it expires.\n            return accessToken;\n        } else {\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUri}`;\n            window.location = accessUrl;\n        }\n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, {\n            headers: {\n                Authorization: `Bearer ${accessToken}`\n            }\n        }).then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            if (!jsonResponse.tracks) {\n                return [];\n            }\n            return jsonResponse.tracks.items.map(track => ({\n                id: track.id,\n                name: track.name,\n                artist: track.artists[0].name,\n                album: track.album.name,\n                uri: track.uri\n            }));\n        });\n    },\n\n    savePlaylist(name, trackUris) {\n        if (!name || !trackUris.length) {\n            return;\n        }\n        // 1st obtain the spotify access token\n        const accessToken = Spotify.getAccessToken();\n        const headers = { Authorization: `Bearer ${accessToken}` };\n        let userId;\n        // make a fetch request to spotify\n        // pass in the access token of the user for this application\n        // 1st then statement is a promise reutrn after the api request return the data\n        // 2nd then statement is aalso promise that return the tracks from the previous promise.\n        return fetch('https://api.spotify.com/v1/me', { headers: headers }\n        ).then(response => response.json()\n        ).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({ name: name })\n            }).then(response => response.json()\n            ).then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({ uris: trackUris })\n                });\n            });\n        });\n    }\n};\n\nexport default Spotify;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}