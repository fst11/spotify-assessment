{"ast":null,"code":"var _jsxFileName = \"/Users/francisseotho/Library/Mobile Documents/com~apple~CloudDocs/Desktop/generation /spotify assessment/reactexamples/spotify-assmt-skeleton/src/app/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { useState, useEffect } from 'react';\nimport SearchBar from '../components/searchbar/SearchBar.jsx';\nimport SearchResults from '../components/searchresults/SearchResults.jsx';\nimport Playlist from '../components/playlist/Playlist.jsx';\nimport Spotify from '../utils/Spotify.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // create state hooks to manage the characteristics of the application\n  const [searchResults, setsearchResults] = useState([]);\n  const [playlistName, setplayListName] = useState(\"Create New Playlist\");\n  const [playlistTracks, setplayListTrack] = useState([]);\n\n  // at the state of this app compnent, provide default values for searchResults.\n  useEffect(() => {\n    setsearchResults([{\n      id: 1,\n      name: \"Track 1\",\n      artist: \"Track 1 Artist\",\n      album: \"Track 1 Album\"\n    }, {\n      id: 2,\n      name: \"Track 2\",\n      artist: \"Track 2 Artist\",\n      album: \"Track 2 Album\"\n    }, {\n      id: 3,\n      name: \"Track 3\",\n      artist: \"Track 3 Artist\",\n      album: \"Track 3 Album\"\n    }]);\n  }, []);\n\n  // function add track\n  function addTrack(track) {\n    // check if track is found in state playlistTracks\n    const existTrack = playlistTracks.find(currentTrack => track.id === currentTrack.id);\n    // store track only when track is not found in state playlistTrack\n    if (!existTrack) {\n      setplayListTrack([...playlistTracks, track]);\n      return;\n    }\n  }\n  // function remove track will be passed to component playlist\n  function removeTrack(track) {\n    // filter the playlisttrack to return only those that are not 1 of the tracks.\n    const filteredTrack = playlistTracks.filter(currentTrack => track.id !== currentTrack);\n    // store remainding /filter tracks\n    setplayListTrack(filteredTrack);\n  }\n\n  // function to update a new playlist name\n  function updatePlayListName(name) {\n    // store the name in Playlistame\n    setplayListName(name);\n  }\n\n  // function savePlayList calls Spotify.js savePlayList function\n  function savePlaylist() {\n    const trackURIs = playlistTracks.map(track => track.uri);\n    console.log(trackURIs);\n    // Once spotify has captured the new playlist, we reset playlistName and playListTracks\n    Spotify(playlistName, trackURIs).then(() => {\n      updatePlayListName(\"Create New Playlist\");\n      setplayListTracks([]);\n    });\n  }\n\n  // function search call spotify api search request in spotify\n  // which return the results and later store in state search results;\n  function search(term) {\n    Spotify.search(term).then(result => setsearchResults(result));\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Ja\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"highlight\",\n        children: \"mmm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 13\n      }, this), \"ing\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(SearchBar, {\n        onSearch: search\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App-playlist\",\n        children: [/*#__PURE__*/_jsxDEV(SearchResults, {\n          searchResults: searchResults,\n          onAdd: addTrack\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Playlist, {\n          onSave: savePlaylist,\n          playlistName: playlistName,\n          playListTracks: playlistTracks,\n          onRemove: removeTrack,\n          onNameChange: updatePlayListName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QbogyzRXCK99t00hsrQYfzW3NTs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","useEffect","SearchBar","SearchResults","Playlist","Spotify","jsxDEV","_jsxDEV","App","_s","searchResults","setsearchResults","playlistName","setplayListName","playlistTracks","setplayListTrack","id","name","artist","album","addTrack","track","existTrack","find","currentTrack","removeTrack","filteredTrack","filter","updatePlayListName","savePlaylist","trackURIs","map","uri","console","log","then","setplayListTracks","search","term","result","children","className","fileName","_jsxFileName","lineNumber","columnNumber","onSearch","onAdd","onSave","playListTracks","onRemove","onNameChange","_c","$RefreshReg$"],"sources":["/Users/francisseotho/Library/Mobile Documents/com~apple~CloudDocs/Desktop/generation /spotify assessment/reactexamples/spotify-assmt-skeleton/src/app/App.js"],"sourcesContent":["import './App.css';\nimport { useState, useEffect } from 'react';\nimport SearchBar from '../components/searchbar/SearchBar.jsx';\nimport SearchResults from '../components/searchresults/SearchResults.jsx';\nimport Playlist from '../components/playlist/Playlist.jsx';\nimport Spotify from '../utils/Spotify.js';\n\nfunction App() {\n\n  // create state hooks to manage the characteristics of the application\n  const [searchResults, setsearchResults] = useState([]);\n  const [playlistName, setplayListName] = useState(\"Create New Playlist\");\n  const [playlistTracks, setplayListTrack] = useState([]);\n\n  // at the state of this app compnent, provide default values for searchResults.\n  useEffect(() => {\n    setsearchResults([\n      {\n        id: 1,\n        name: \"Track 1\",\n        artist: \"Track 1 Artist\",\n        album: \"Track 1 Album\"\n      },\n      {\n        id: 2,\n        name: \"Track 2\",\n        artist: \"Track 2 Artist\",\n        album: \"Track 2 Album\"\n      },\n      {\n        id: 3,\n        name: \"Track 3\",\n        artist: \"Track 3 Artist\",\n        album: \"Track 3 Album\"\n      },\n    ]);\n  }, []);\n\n  // function add track\n  function addTrack(track) {\n    // check if track is found in state playlistTracks\n    const existTrack = playlistTracks.find((currentTrack) => track.id === currentTrack.id);\n    // store track only when track is not found in state playlistTrack\n    if (!existTrack) {\n      setplayListTrack([...playlistTracks, track]);\n      return;\n    }\n  }\n  // function remove track will be passed to component playlist\n  function removeTrack(track) {\n    // filter the playlisttrack to return only those that are not 1 of the tracks.\n    const filteredTrack = playlistTracks.filter((currentTrack) => track.id !== currentTrack);\n    // store remainding /filter tracks\n    setplayListTrack(filteredTrack);\n\n  }\n\n  // function to update a new playlist name\n  function updatePlayListName(name) {\n    // store the name in Playlistame\n    setplayListName(name);\n  }\n\n  // function savePlayList calls Spotify.js savePlayList function\n  function savePlaylist() {\n    const trackURIs = playlistTracks.map((track) => track.uri);\n    console.log(trackURIs);\n    // Once spotify has captured the new playlist, we reset playlistName and playListTracks\n    Spotify(playlistName, trackURIs).then(()=>{\n      updatePlayListName(\"Create New Playlist\");\n      setplayListTracks([]);\n    })\n  }\n\n  // function search call spotify api search request in spotify\n  // which return the results and later store in state search results;\n  function search(term) {\n    Spotify.search(term).then((result) => setsearchResults(result));\n  }\n\n\n\n  return (\n    <div>\n      <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n      <div className=\"App\">\n        {/* <!-- Add a SearchBar component --> */}\n        <SearchBar onSearch={search} />\n        <div className=\"App-playlist\">\n          {/* <!-- Add a SearchResults component --> */}\n          <SearchResults searchResults={searchResults} onAdd={addTrack} />\n          {/* <!-- Add a Playlist component --> */}\n          <Playlist onSave={savePlaylist} playlistName={playlistName} playListTracks={playlistTracks} onRemove={removeTrack} onNameChange={updatePlayListName} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}